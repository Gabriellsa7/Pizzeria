"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("../../shared/utils/constants");
var getAccessToken_1 = tslib_1.__importDefault(require("./getAccessToken"));
/**
 * ## Protecting API routes
 * Wrap an API Route to check that the user has a valid session. If they're not logged in the handler will return a
 * 401 Unauthorized.
 *
 * ```js
 * // pages/api/protected-route.js
 * import { withApiAuth, supabaseServerClient } from '@supabase/supabase-auth-helpers/nextjs';
 *
 * export default withApiAuth(async function ProtectedRoute(req, res) {
 *   // Run queries with RLS on the server
 *   const { data } = await supabaseServerClient({ req, res }).from('test').select('*');
 *   res.json(data)
 * });
 * ```
 *
 * If you visit `/api/protected-route` without a valid session cookie, you will get a 401 response.
 *
 * @category Server
 */
function withApiAuth(handler, options) {
    var _this = this;
    if (options === void 0) { options = {}; }
    return function (req, res) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var cookieOptions, tokenRefreshMargin, accessToken, error_1, error_2;
        var _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 6, , 7]);
                    cookieOptions = tslib_1.__assign(tslib_1.__assign({}, constants_1.COOKIE_OPTIONS), options.cookieOptions);
                    tokenRefreshMargin = (_a = options.tokenRefreshMargin) !== null && _a !== void 0 ? _a : constants_1.TOKEN_REFRESH_MARGIN;
                    return [4 /*yield*/, (0, getAccessToken_1.default)({ req: req, res: res }, { cookieOptions: cookieOptions, tokenRefreshMargin: tokenRefreshMargin })];
                case 1:
                    accessToken = _b.sent();
                    if (!accessToken)
                        throw new Error('No access token!');
                    _b.label = 2;
                case 2:
                    _b.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, handler(req, res)];
                case 3:
                    _b.sent();
                    return [3 /*break*/, 5];
                case 4:
                    error_1 = _b.sent();
                    res.status(500).json({
                        error: String(error_1)
                    });
                    return [2 /*return*/];
                case 5: return [3 /*break*/, 7];
                case 6:
                    error_2 = _b.sent();
                    res.status(401).json({
                        error: 'not_authenticated',
                        description: 'The user does not have an active session or is not authenticated'
                    });
                    return [2 /*return*/];
                case 7: return [2 /*return*/];
            }
        });
    }); };
}
exports.default = withApiAuth;
//# sourceMappingURL=withApiAuth.js.map