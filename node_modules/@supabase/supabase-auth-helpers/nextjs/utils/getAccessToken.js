"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var getUser_1 = tslib_1.__importDefault(require("./getUser"));
var jwt_1 = require("../../shared/utils/jwt");
var constants_1 = require("../../shared/utils/constants");
function getAccessToken(context, options) {
    var _a;
    if (options === void 0) { options = {}; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var cookieOptions, tokenRefreshMargin, access_token, jwtUser, timeNow, accessToken;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!context.req.cookies) {
                        throw new Error('Not able to parse cookies!');
                    }
                    cookieOptions = tslib_1.__assign(tslib_1.__assign({}, constants_1.COOKIE_OPTIONS), options.cookieOptions);
                    tokenRefreshMargin = (_a = options.tokenRefreshMargin) !== null && _a !== void 0 ? _a : constants_1.TOKEN_REFRESH_MARGIN;
                    access_token = context.req.cookies["".concat(cookieOptions.name, "-access-token")];
                    if (!access_token) {
                        throw new Error('No cookie found!');
                    }
                    jwtUser = (0, jwt_1.jwtDecoder)(access_token);
                    if (!(jwtUser === null || jwtUser === void 0 ? void 0 : jwtUser.exp)) {
                        throw new Error('Not able to parse JWT payload!');
                    }
                    timeNow = Math.round(Date.now() / 1000);
                    if (!(jwtUser.exp < timeNow + tokenRefreshMargin)) return [3 /*break*/, 2];
                    return [4 /*yield*/, (0, getUser_1.default)(context, {
                            cookieOptions: cookieOptions,
                            tokenRefreshMargin: tokenRefreshMargin
                        })];
                case 1:
                    accessToken = (_b.sent()).accessToken;
                    return [2 /*return*/, accessToken];
                case 2: return [2 /*return*/, access_token];
            }
        });
    });
}
exports.default = getAccessToken;
//# sourceMappingURL=getAccessToken.js.map