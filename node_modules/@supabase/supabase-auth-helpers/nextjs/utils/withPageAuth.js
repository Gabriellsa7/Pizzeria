"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var jwt_1 = require("../../shared/utils/jwt");
var constants_1 = require("../../shared/utils/constants");
var getUser_1 = tslib_1.__importDefault(require("./getUser"));
/**
 * ## Protecting Pages with Server Side Rendering (SSR)
 * If you wrap your `getServerSideProps` with {@link withPageAuth} your props object will be augmented with
 * the user object {@link User}
 *
 * ```js
 * // pages/profile.js
 * import { withPageAuth } from '@supabase/supabase-auth-helpers/nextjs';
 *
 * export default function Profile({ user }) {
 *   return <div>Hello {user.name}</div>;
 * }
 *
 * export const getServerSideProps = withPageAuth({ redirectTo: '/login' });
 * ```
 *
 * If there is no authenticated user, they will be redirect to your home page, unless you specify the `redirectTo` option.
 *
 * You can pass in your own `getServerSideProps` method, the props returned from this will be merged with the
 * user props. You can also access the user session data by calling `getUser` inside of this method, eg:
 *
 * ```js
 * // pages/protected-page.js
 * import { withPageAuth, getUser } from '@supabase/supabase-auth-helpers/nextjs';
 *
 * export default function ProtectedPage({ user, customProp }) {
 *   return <div>Protected content</div>;
 * }
 *
 * export const getServerSideProps = withPageAuth({
 *   redirectTo: '/foo',
 *   async getServerSideProps(ctx) {
 *     // Run queries with RLS on the server
 *     const { data } = await supabaseServerClient(ctx).from('test').select('*');
 *     return { props: { data } };
 *   }
 * });
 * ```
 *
 * @category Server
 */
function withPageAuth(_a) {
    var _this = this;
    var _b = _a === void 0 ? {} : _a, _c = _b.authRequired, authRequired = _c === void 0 ? true : _c, _d = _b.redirectTo, redirectTo = _d === void 0 ? '/' : _d, _e = _b.getServerSideProps, getServerSideProps = _e === void 0 ? undefined : _e, _f = _b.cookieOptions, cookieOptions = _f === void 0 ? {} : _f, _g = _b.tokenRefreshMargin, tokenRefreshMargin = _g === void 0 ? constants_1.TOKEN_REFRESH_MARGIN : _g;
    return function (context) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var access_token, user, accessToken, jwtUser, timeNow, response, mergedUser, ret, error_1, e_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 8, , 9]);
                    if (!context.req.cookies) {
                        throw new Error('Not able to parse cookies!');
                    }
                    cookieOptions = tslib_1.__assign(tslib_1.__assign({}, constants_1.COOKIE_OPTIONS), cookieOptions);
                    access_token = context.req.cookies["".concat(cookieOptions.name, "-access-token")];
                    if (!access_token) {
                        throw new Error('No cookie found!');
                    }
                    user = void 0, accessToken = void 0;
                    jwtUser = (0, jwt_1.jwtDecoder)(access_token);
                    if (!(jwtUser === null || jwtUser === void 0 ? void 0 : jwtUser.exp)) {
                        throw new Error('Not able to parse JWT payload!');
                    }
                    timeNow = Math.round(Date.now() / 1000);
                    if (!(jwtUser.exp < timeNow + tokenRefreshMargin)) return [3 /*break*/, 2];
                    return [4 /*yield*/, (0, getUser_1.default)(context, { cookieOptions: cookieOptions })];
                case 1:
                    response = _a.sent();
                    user = response.user;
                    accessToken = response.accessToken;
                    return [3 /*break*/, 3];
                case 2:
                    // Transform JWT and add note that it ise cached from JWT.
                    user = {
                        id: jwtUser.sub,
                        aud: null,
                        role: null,
                        email: null,
                        email_confirmed_at: null,
                        phone: null,
                        confirmed_at: null,
                        last_sign_in_at: null,
                        app_metadata: {},
                        user_metadata: {},
                        identities: [],
                        created_at: null,
                        updated_at: null,
                        'supabase-auth-helpers-note': 'This user payload is retrieved from the cached JWT and might be stale. If you need up to date user data, please call the `getUser` method in a server-side context!'
                    };
                    mergedUser = tslib_1.__assign(tslib_1.__assign({}, user), jwtUser);
                    user = mergedUser;
                    accessToken = access_token;
                    _a.label = 3;
                case 3:
                    if (!user) {
                        throw new Error('No user found!');
                    }
                    ret = { props: {} };
                    if (!getServerSideProps) return [3 /*break*/, 7];
                    _a.label = 4;
                case 4:
                    _a.trys.push([4, 6, , 7]);
                    return [4 /*yield*/, getServerSideProps(context)];
                case 5:
                    ret = _a.sent();
                    return [3 /*break*/, 7];
                case 6:
                    error_1 = _a.sent();
                    ret = {
                        props: {
                            error: String(error_1)
                        }
                    };
                    return [3 /*break*/, 7];
                case 7: return [2 /*return*/, tslib_1.__assign(tslib_1.__assign({}, ret), { props: tslib_1.__assign(tslib_1.__assign({}, ret.props), { user: user, accessToken: accessToken }) })];
                case 8:
                    e_1 = _a.sent();
                    if (authRequired)
                        return [2 /*return*/, {
                                redirect: {
                                    destination: redirectTo,
                                    permanent: false
                                }
                            }];
                    return [2 /*return*/, {
                            props: { user: null, accessToken: null, error: String(e_1) }
                        }];
                case 9: return [2 /*return*/];
            }
        });
    }); };
}
exports.default = withPageAuth;
//# sourceMappingURL=withPageAuth.js.map