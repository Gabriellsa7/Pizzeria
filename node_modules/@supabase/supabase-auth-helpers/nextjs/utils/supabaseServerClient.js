"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var initSupabase_1 = require("./initSupabase");
/**
 * This is a helper method to wrap your SupabaseClient to inject a user's access_token to make use of RLS on the server side.
 *
 * ```js
 * import { supabaseServerClient } from '@supabase/supabase-auth-helpers/nextjs';
 *
 * export async function getServerSideProps(context) {
 *   // Run queries with RLS on the server
 *   const { data } = await supabaseServerClient(context)
 *     .from('test')
 *     .select('*');
 *   return {
 *     props: { data }, // will be passed to the page component as props
 *   }
 * }
 * ```
 *
 * @param supabaseClient
 * @param context
 * @param cookieOptions
 * @returns supabaseClient
 *
 * @category Server
 */
function supabaseServerClient(context, cookieOptions) {
    if (cookieOptions === void 0) { cookieOptions = {
        name: 'sb'
    }; }
    if (!context.req.cookies) {
        return initSupabase_1.supabaseClient;
    }
    var access_token = context.req.cookies["".concat(cookieOptions.name, "-access-token")];
    initSupabase_1.supabaseClient.auth.setAuth(access_token);
    return initSupabase_1.supabaseClient;
}
exports.default = supabaseServerClient;
//# sourceMappingURL=supabaseServerClient.js.map