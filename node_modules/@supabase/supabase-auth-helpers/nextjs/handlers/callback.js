"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var cookies_1 = require("../../shared/utils/cookies");
var NextAdapter_1 = require("../../shared/adapters/NextAdapter");
var constants_1 = require("../../shared/utils/constants");
var getUser_1 = tslib_1.__importDefault(require("../utils/getUser"));
function handelCallback(req, res, options) {
    if (options === void 0) { options = {}; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var cookieOptions, _a, event, session;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (req.method !== 'POST') {
                        res.setHeader('Allow', 'POST');
                        res.status(405).end('Method Not Allowed');
                    }
                    cookieOptions = tslib_1.__assign(tslib_1.__assign({}, constants_1.COOKIE_OPTIONS), options.cookieOptions);
                    _a = req.body, event = _a.event, session = _a.session;
                    if (!event)
                        throw new Error('Auth event missing!');
                    if (!(event === 'USER_UPDATED')) return [3 /*break*/, 2];
                    return [4 /*yield*/, (0, getUser_1.default)({ req: req, res: res }, { forceRefresh: true })];
                case 1:
                    _b.sent();
                    _b.label = 2;
                case 2:
                    if (event === 'SIGNED_IN') {
                        if (!session)
                            throw new Error('Auth session missing!');
                        (0, cookies_1.setCookies)(new NextAdapter_1.NextRequestAdapter(req), new NextAdapter_1.NextResponseAdapter(res), [
                            session.access_token
                                ? { key: 'access-token', value: session.access_token }
                                : null,
                            session.refresh_token
                                ? { key: 'refresh-token', value: session.refresh_token }
                                : null,
                            session.provider_token
                                ? { key: 'provider-token', value: session.provider_token }
                                : null
                        ].reduce(function (acc, token) {
                            var _a;
                            if (token) {
                                acc.push({
                                    name: "".concat(cookieOptions.name, "-").concat(token.key),
                                    value: token.value,
                                    domain: cookieOptions.domain,
                                    maxAge: (_a = cookieOptions.lifetime) !== null && _a !== void 0 ? _a : 0,
                                    path: cookieOptions.path,
                                    sameSite: cookieOptions.sameSite
                                });
                            }
                            return acc;
                        }, []));
                    }
                    if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {
                        (0, cookies_1.setCookies)(new NextAdapter_1.NextRequestAdapter(req), new NextAdapter_1.NextResponseAdapter(res), ['access-token', 'refresh-token', 'provider-token'].map(function (key) { return ({
                            name: "".concat(cookieOptions.name, "-").concat(key),
                            value: '',
                            maxAge: -1
                        }); }));
                    }
                    res.status(200).json({});
                    return [2 /*return*/];
            }
        });
    });
}
exports.default = handelCallback;
//# sourceMappingURL=callback.js.map