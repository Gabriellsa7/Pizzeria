"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withMiddlewareAuth = void 0;
var tslib_1 = require("tslib");
var server_1 = require("next/server");
var constants_1 = require("../../shared/utils/constants");
var cookies_1 = require("../../shared/utils/cookies");
var NextMiddlewareAdapter_1 = require("../../shared/adapters/NextMiddlewareAdapter");
var jwt_1 = require("../../shared/utils/jwt");
var withMiddlewareAuth = function (options) {
    if (options === void 0) { options = {}; }
    return function (req) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var cookieOptions_1, tokenRefreshMargin_1, access_token_1, refresh_token_1, res_1, getUser, authResult, err_1, _a, redirectTo, redirectUrl;
        var _b;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 2, , 3]);
                    if (!process.env.NEXT_PUBLIC_SUPABASE_URL ||
                        !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
                        throw new Error('NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY env variables are required!');
                    }
                    if (!req.cookies) {
                        throw new Error('Not able to parse cookies!');
                    }
                    cookieOptions_1 = tslib_1.__assign(tslib_1.__assign({}, constants_1.COOKIE_OPTIONS), options.cookieOptions);
                    tokenRefreshMargin_1 = (_b = options.tokenRefreshMargin) !== null && _b !== void 0 ? _b : constants_1.TOKEN_REFRESH_MARGIN;
                    access_token_1 = req.cookies["".concat(cookieOptions_1.name, "-access-token")];
                    refresh_token_1 = req.cookies["".concat(cookieOptions_1.name, "-refresh-token")];
                    res_1 = server_1.NextResponse.next();
                    getUser = function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                        var jwtUser, timeNow, requestHeaders, data;
                        var _a;
                        return tslib_1.__generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    if (!access_token_1) {
                                        throw new Error('No cookie found!');
                                    }
                                    jwtUser = (0, jwt_1.jwtDecoder)(access_token_1);
                                    if (!(jwtUser === null || jwtUser === void 0 ? void 0 : jwtUser.exp)) {
                                        throw new Error('Not able to parse JWT payload!');
                                    }
                                    timeNow = Math.round(Date.now() / 1000);
                                    if (!(jwtUser.exp < timeNow + tokenRefreshMargin_1)) return [3 /*break*/, 2];
                                    if (!refresh_token_1) {
                                        throw new Error('No refresh_token cookie found!');
                                    }
                                    requestHeaders = new Headers();
                                    requestHeaders.set('accept', 'json');
                                    requestHeaders.set('apiKey', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);
                                    requestHeaders.set('authorization', "Bearer ".concat(process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY));
                                    return [4 /*yield*/, fetch("".concat(process.env.NEXT_PUBLIC_SUPABASE_URL, "/auth/v1/token?grant_type=refresh_token"), {
                                            method: 'POST',
                                            headers: requestHeaders,
                                            body: JSON.stringify({ refresh_token: refresh_token_1 })
                                        })
                                            .then(function (res) { return res.json(); })
                                            .catch(function (e) { return ({
                                            error: String(e)
                                        }); })];
                                case 1:
                                    data = _b.sent();
                                    (0, cookies_1.setCookies)(new NextMiddlewareAdapter_1.NextRequestAdapter(req), new NextMiddlewareAdapter_1.NextResponseAdapter(res_1), [
                                        { key: 'access-token', value: data.access_token },
                                        { key: 'refresh-token', value: data.refresh_token }
                                    ].map(function (token) {
                                        var _a;
                                        return ({
                                            name: "".concat(cookieOptions_1.name, "-").concat(token.key),
                                            value: token.value,
                                            domain: cookieOptions_1.domain,
                                            maxAge: (_a = cookieOptions_1.lifetime) !== null && _a !== void 0 ? _a : 0,
                                            path: cookieOptions_1.path,
                                            sameSite: cookieOptions_1.sameSite
                                        });
                                    }));
                                    return [2 /*return*/, { user: (_a = data === null || data === void 0 ? void 0 : data.user) !== null && _a !== void 0 ? _a : null, error: data === null || data === void 0 ? void 0 : data.error }];
                                case 2: return [2 /*return*/, { user: jwtUser, error: null }];
                            }
                        });
                    }); };
                    return [4 /*yield*/, getUser()];
                case 1:
                    authResult = _c.sent();
                    if (authResult.error) {
                        throw new Error("Authorization error, redirecting to login page: ".concat(authResult.error.message));
                    }
                    else if (!authResult.user) {
                        throw new Error('No auth user, redirecting');
                    }
                    // Authentication successful, forward request to protected route
                    return [2 /*return*/, res_1];
                case 2:
                    err_1 = _c.sent();
                    _a = options.redirectTo, redirectTo = _a === void 0 ? '/' : _a;
                    if (err_1 instanceof Error) {
                        console.log("Could not authenticate request, redirecting to ".concat(redirectTo, ":"), err_1);
                    }
                    redirectUrl = req.nextUrl.clone();
                    redirectUrl.pathname = redirectTo;
                    redirectUrl.searchParams.set("redirectedFrom", req.nextUrl.pathname);
                    // Authentication failed, redirect request
                    return [2 /*return*/, server_1.NextResponse.redirect(redirectUrl)];
                case 3: return [2 /*return*/];
            }
        });
    }); };
};
exports.withMiddlewareAuth = withMiddlewareAuth;
//# sourceMappingURL=withMiddlewareAuth.js.map