"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteCookie = exports.setCookie = exports.setCookies = exports.getCookieString = void 0;
var tslib_1 = require("tslib");
/**
 * Serialize data into a cookie header.
 */
function serialize(name, val, options) {
    var opt = options || {};
    var enc = encodeURIComponent;
    /* eslint-disable-next-line no-control-regex */
    var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    if (typeof enc !== 'function') {
        throw new TypeError('option encode is invalid');
    }
    if (!fieldContentRegExp.test(name)) {
        throw new TypeError('argument name is invalid');
    }
    var value = enc(val);
    if (value && !fieldContentRegExp.test(value)) {
        throw new TypeError('argument val is invalid');
    }
    var str = name + '=' + value;
    if (null != opt.maxAge) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge)) {
            throw new TypeError('option maxAge is invalid');
        }
        str += '; Max-Age=' + Math.floor(maxAge);
    }
    if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) {
            throw new TypeError('option domain is invalid');
        }
        str += '; Domain=' + opt.domain;
    }
    if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) {
            throw new TypeError('option path is invalid');
        }
        str += '; Path=' + opt.path;
    }
    if (opt.expires) {
        if (typeof opt.expires.toUTCString !== 'function') {
            throw new TypeError('option expires is invalid');
        }
        str += '; Expires=' + opt.expires.toUTCString();
    }
    if (opt.httpOnly) {
        str += '; HttpOnly';
    }
    if (opt.secure) {
        str += '; Secure';
    }
    if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === 'string'
            ? opt.sameSite.toLowerCase()
            : opt.sameSite;
        switch (sameSite) {
            case 'lax':
                str += '; SameSite=Lax';
                break;
            case 'strict':
                str += '; SameSite=Strict';
                break;
            case 'none':
                str += '; SameSite=None';
                break;
            default:
                throw new TypeError('option sameSite is invalid');
        }
    }
    return str;
}
/**
 * Based on the environment and the request we know if a secure cookie can be set.
 */
function isSecureEnvironment(req) {
    if (!req || !req.getHeader('host')) {
        throw new Error('The "host" request header is not available');
    }
    var headerHost = req.getHeader('host');
    var host = (headerHost.indexOf(':') > -1 && headerHost.split(':')[0]) || headerHost;
    if (['localhost', '127.0.0.1'].indexOf(host) > -1 ||
        host.endsWith('.local')) {
        return false;
    }
    return true;
}
/**
 * Serialize a cookie to a string.
 */
function serializeCookie(cookie, secure) {
    var _a, _b, _c;
    return serialize(cookie.name, cookie.value, {
        maxAge: cookie.maxAge,
        expires: new Date(Date.now() + cookie.maxAge * 1000),
        httpOnly: true,
        secure: secure,
        path: (_a = cookie.path) !== null && _a !== void 0 ? _a : '/',
        domain: (_b = cookie.domain) !== null && _b !== void 0 ? _b : '',
        sameSite: (_c = cookie.sameSite) !== null && _c !== void 0 ? _c : 'lax'
    });
}
/**
 * Get Cookie Header strings.
 */
function getCookieString(req, res, cookies) {
    var strCookies = cookies.map(function (c) {
        return serializeCookie(c, isSecureEnvironment(req));
    });
    var previousCookies = res.getHeader('Set-Cookie');
    if (previousCookies) {
        if (previousCookies instanceof Array) {
            Array.prototype.push.apply(strCookies, previousCookies);
        }
        else if (typeof previousCookies === 'string') {
            strCookies.push(previousCookies);
        }
    }
    return strCookies;
}
exports.getCookieString = getCookieString;
/**
 * Set one or more cookies.
 */
function setCookies(req, res, cookies) {
    var e_1, _a;
    try {
        for (var cookies_1 = tslib_1.__values(cookies), cookies_1_1 = cookies_1.next(); !cookies_1_1.done; cookies_1_1 = cookies_1.next()) {
            var cookie = cookies_1_1.value;
            req.setRequestCookie(cookie.name, cookie.value);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (cookies_1_1 && !cookies_1_1.done && (_a = cookies_1.return)) _a.call(cookies_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    res.setHeader('Set-Cookie', getCookieString(req, res, cookies));
}
exports.setCookies = setCookies;
/**
 * Set one or more cookies.
 */
function setCookie(req, res, cookie) {
    setCookies(req, res, [cookie]);
}
exports.setCookie = setCookie;
function deleteCookie(req, res, name) {
    setCookie(req, res, {
        name: name,
        value: '',
        maxAge: -1
    });
}
exports.deleteCookie = deleteCookie;
//# sourceMappingURL=cookies.js.map